#!/bin/bash

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS] [COMMAND]"
    echo ""
    echo "Options:"
    echo "  -v, --verbose    Enable verbose output"
    echo "  -h, --help       Show this help message"
    echo ""
    echo "Commands:"
    echo "  up       - Start the magentic-desktop container (with cleanup)"
    echo "  down     - Stop and remove the container"
    echo "  logs     - Show container logs"
    echo "  restart  - Restart the container"
    echo "  build    - Build the image (with cleanup)"
    echo "  clean    - Clean up containers and images only"
    echo "  status   - Show container status"
    echo ""
    echo "Examples:"
    echo "  $0 up              # Start container and follow logs"
    echo "  $0 -v up           # Start container with verbose output"
    echo "  $0 logs            # Show logs only"
    echo "  $0 --verbose down  # Stop container with verbose output"
}

# Check if docker-compose is available
if ! command -v docker-compose &> /dev/null && ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed or not in PATH"
    exit 1
fi

# Use docker compose (newer) or docker-compose (older)
COMPOSE_CMD="docker compose"
if ! docker compose version &> /dev/null; then
    COMPOSE_CMD="docker-compose"
fi

# Initialize variables
VERBOSE=false
COMMAND=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            echo ""
            show_usage
            exit 1
            ;;
        *)
            if [ -z "$COMMAND" ]; then
                COMMAND="$1"
            else
                echo "Too many arguments. Only one command allowed."
                echo ""
                show_usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Set default command if none provided
COMMAND="${COMMAND:-up}"

# Verbose output function
verbose_echo() {
    if [ "$VERBOSE" = "true" ]; then
        echo "[VERBOSE] $*"
    fi
}

# Function to cleanup existing containers and images
cleanup_and_rebuild() {
    echo "Cleaning up existing containers and images..."
    verbose_echo "Using compose command: $COMPOSE_CMD"
    
    # Stop and remove container if running
    if $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
        echo "Stopping running container..."
        verbose_echo "Executing: $COMPOSE_CMD down"
        $COMPOSE_CMD down
    else
        verbose_echo "No running container found"
    fi
    
    # Remove container if it exists (even if stopped)
    if docker ps -a --format "table {{.Names}}" | grep -q "magentic-desktop"; then
        echo "Removing existing container..."
        verbose_echo "Executing: docker rm -f magentic-desktop"
        docker rm -f magentic-desktop 2>/dev/null || true
    else
        verbose_echo "No existing container found"
    fi
    
    # Remove the image to force rebuild
    if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "magentic-desktop"; then
        echo "Removing existing image..."
        verbose_echo "Executing: docker rmi -f magentic-desktop"
        docker rmi -f magentic-desktop 2>/dev/null || true
    else
        verbose_echo "No existing image found"
    fi
    
    echo "Cleanup completed!"
}

# Parse command
case "$COMMAND" in
    "up")
        cleanup_and_rebuild
        echo ""
        echo "Building and starting magentic-desktop with Docker Compose..."
        verbose_echo "Executing: $COMPOSE_CMD up --build -d"
        
        # Start the container and capture exit code
        if ! $COMPOSE_CMD up --build -d; then
            echo "ERROR: Failed to start container!"
            echo "Aborting script execution."
            exit 1
        fi
        
        # Wait a moment for container to fully start
        echo "Waiting for container to start..."
        sleep 3
        
        # Verify container is actually running
        verbose_echo "Checking container status..."
        if ! $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "ERROR: Container failed to start or is not running!"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        # Check if container is healthy (running state)
        CONTAINER_STATUS=$(docker ps --filter "name=magentic-desktop" --format "{{.Status}}" | head -1)
        if [[ ! "$CONTAINER_STATUS" =~ "Up" ]]; then
            echo "ERROR: Container is not in running state! Status: $CONTAINER_STATUS"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        echo ""
        echo "✓ Container successfully started and is running!"
        echo "Press Ctrl+C to stop following logs (container will continue running)"
        echo "To connect via RDP, use localhost:3389"
        verbose_echo "Container ports: 3389 (RDP), 8080 (VS Code)"
        verbose_echo "Container status: $CONTAINER_STATUS"
        echo ""
        verbose_echo "Executing: $COMPOSE_CMD logs -f"
        $COMPOSE_CMD logs -f
        ;;
    "down")
        echo "Stopping magentic-desktop container..."
        verbose_echo "Executing: $COMPOSE_CMD down"
        $COMPOSE_CMD down
        echo "Container stopped and removed."
        ;;
    "logs")
        echo "Showing magentic-desktop logs..."
        verbose_echo "Executing: $COMPOSE_CMD logs -f"
        $COMPOSE_CMD logs -f
        ;;
    "restart")
        echo "Restarting magentic-desktop container..."
        verbose_echo "Executing: $COMPOSE_CMD restart"
        
        # Restart the container and capture exit code
        if ! $COMPOSE_CMD restart; then
            echo "ERROR: Failed to restart container!"
            echo "Aborting script execution."
            exit 1
        fi
        
        # Wait a moment for container to fully start
        echo "Waiting for container to restart..."
        sleep 3
        
        # Verify container is actually running
        verbose_echo "Checking container status..."
        if ! $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "ERROR: Container failed to restart or is not running!"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        # Check if container is healthy (running state)
        CONTAINER_STATUS=$(docker ps --filter "name=magentic-desktop" --format "{{.Status}}" | head -1)
        if [[ ! "$CONTAINER_STATUS" =~ "Up" ]]; then
            echo "ERROR: Container is not in running state! Status: $CONTAINER_STATUS"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        echo "✓ Container successfully restarted and is running!"
        echo "Following logs..."
        verbose_echo "Container status: $CONTAINER_STATUS"
        verbose_echo "Executing: $COMPOSE_CMD logs -f"
        $COMPOSE_CMD logs -f
        ;;
    "build")
        cleanup_and_rebuild
        echo ""
        echo "Building magentic-desktop image..."
        verbose_echo "Executing: $COMPOSE_CMD build --no-cache"
        $COMPOSE_CMD build --no-cache
        echo "Build completed!"
        ;;
    "clean")
        cleanup_and_rebuild
        ;;
    "status")
        echo "Container status:"
        verbose_echo "Executing: $COMPOSE_CMD ps"
        $COMPOSE_CMD ps
        verbose_echo "Executing: docker ps -a (all containers)"
        docker ps -a
        ;;
    "help"|"-h"|"--help")
        show_usage
        ;;
    *)
        echo "Unknown command: $COMMAND"
        echo ""
        show_usage
        exit 1
        ;;
esac
