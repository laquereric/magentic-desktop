#!/bin/bash

# Script to detect and return the correct display for X11 applications
# This script centralizes display detection logic used across multiple scripts

set -e  # Exit on any error

# Default values
DEFAULT_DISPLAY=":0"
VERBOSE="false"

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --default DISPLAY     Set default display if none detected (default: :0)"
    echo "  --verbose             Enable verbose output"
    echo "  --help                Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                    # Detect display, fallback to :0"
    echo "  $0 --default :1       # Detect display, fallback to :1"
    echo "  $0 --verbose          # Detect display with verbose output"
    echo ""
    echo "Output:"
    echo "  Returns the detected display (e.g., :0, :1, etc.)"
    echo "  Exit code 0 on success, 1 on error"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --default)
            DEFAULT_DISPLAY="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE="true"
            shift
            ;;
        --help|-h)
            show_usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
done

# Function to log verbose messages
log_verbose() {
    if [ "$VERBOSE" = "true" ]; then
        echo "$1" >&2
    fi
}

# Detect the correct display
detect_display() {
    local detected_display="$DEFAULT_DISPLAY"
    
    log_verbose "Starting display detection..."
    
    # First, check if DISPLAY environment variable is set
    if [ -n "$DISPLAY" ]; then
        detected_display="$DISPLAY"
        log_verbose "Using DISPLAY environment variable: $detected_display"
    else
        log_verbose "DISPLAY environment variable not set, attempting Xorg detection..."
        
        # Try to detect active X display by looking for Xorg processes
        local xorg_info
        xorg_info=$(ps aux | grep "Xorg.*:" | grep -v grep | head -1)
        
        if [ -n "$xorg_info" ]; then
            log_verbose "Found Xorg process: $xorg_info"
            
            # Extract display number from Xorg process
            local extracted_display
            extracted_display=$(echo "$xorg_info" | sed -n "s/.*Xorg :\\([0-9]*\\).*/:\\1/p")
            
            if [ -n "$extracted_display" ]; then
                detected_display="$extracted_display"
                log_verbose "Extracted display from Xorg process: $detected_display"
            else
                log_verbose "Could not extract display from Xorg process, using default"
            fi
        else
            log_verbose "No Xorg processes found, using default display"
        fi
    fi
    
    echo "$detected_display"
}

# Main execution
main() {
    local display
    display=$(detect_display)
    
    if [ -z "$display" ]; then
        echo "Error: Failed to detect display" >&2
        exit 1
    fi
    
    log_verbose "Final display: $display"
    echo "$display"
}

# Run main function
main
