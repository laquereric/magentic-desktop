#!/bin/bash

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS] [COMMAND]"
    echo ""
    echo "Options:"
    echo "  -v, --verbose    Enable verbose output"
    echo "  -s, --shell CMD  Override entrypoint with shell command (requires CMD argument)"
    echo "  -h, --help       Show this help message"
    echo ""
    echo "Commands:"
    echo "  up       - Start the magentic-desktop container (reuses existing image)"
    echo "  rebuild  - Rebuild image and start container (with cleanup)"
    echo "  down     - Stop and remove the container"
    echo "  logs     - Show and follow container logs"
    echo "  restart  - Restart the container"
    echo "  build    - Build the image only (with cleanup)"
    echo "  build_multi - Build multi-architecture image (ARM + Intel)"
    echo "  tag      - Tag an existing local image for GHCR registry"
    echo "  push_ghcr - Push the image to GHCR registry"
    echo "  local_image_repo - Show details of the local image repository"
    echo "  clean    - Clean up containers and images only"
    echo "  status   - Show container status"
    echo "  shell    - Start container and drop into interactive bash session"
    echo ""
    echo "Examples:"
    echo "  $0 up                    # Start container (reuses existing image)"
    echo "  $0 rebuild               # Rebuild image and start container"
    echo "  $0 build                 # Build image only"
    echo "  $0 build_multi           # Build multi-architecture image (ARM + Intel)"
    echo "  $0 tag                   # Tag existing image for GHCR registry"
    echo "  $0 push_ghcr             # Push image to GHCR registry"
    echo "  $0 local_image_repo      # Show local image repository details"
    echo "  $0 -v up                 # Start container with verbose output"
    echo "  $0 shell                 # Start container and drop into bash session"
    echo "  $0 -s 'echo hello' up    # Start container with custom shell command"
    echo "  $0 -s '/desks/noentrypoint.sh' up  # Start with custom script"
    echo "  $0 -s 'bash -c \"sleep 10\"' up     # Start with long-running command"
    echo "  $0 logs                  # Show container logs"
    echo "  $0 down                  # Stop and remove container"
    echo "  $0 status                # Show container status"
}

# Check if docker-compose is available
if ! command -v docker-compose &> /dev/null && ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed or not in PATH"
    exit 1
fi

# Use docker compose (newer) or docker-compose (older)
COMPOSE_CMD="docker compose"
if ! docker compose version &> /dev/null; then
    COMPOSE_CMD="docker-compose"
fi

# Initialize variables
VERBOSE=false
SHELL_OVERRIDE=""
COMMAND=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -s|--shell)
            if [ -n "$2" ] && [[ ! "$2" =~ ^- ]]; then
                SHELL_OVERRIDE="$2"
                shift 2
            else
                echo "Error: --shell option requires a command argument"
                echo "Example: $0 -s 'echo hello' up"
                exit 1
            fi
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            echo ""
            show_usage
            exit 1
            ;;
        *)
            if [ -z "$COMMAND" ]; then
                COMMAND="$1"
            else
                echo "Too many arguments. Only one command allowed."
                echo ""
                show_usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Set default command if none provided - show usage instead of defaulting to 'up'
if [ -z "$COMMAND" ]; then
    show_usage
    exit 0
fi

# Verbose output function
verbose_echo() {
    if [ "$VERBOSE" = "true" ]; then
        echo "[VERBOSE] $*"
    fi
}

# Detailed abort function
abort_with_reason() {
    local reason="$1"
    local context="$2"
    local exit_code="${3:-1}"
    
    echo ""
    echo "❌ OPERATION FAILED"
    echo "Reason: $reason"
    if [ -n "$context" ]; then
        echo "Context: $context"
    fi
    echo ""
    echo "Troubleshooting tips:"
    echo "  - Check if Docker is running: docker ps"
    echo "  - Check container logs: $0 logs"
    echo "  - Check container status: $0 status"
    echo "  - Try rebuilding: $0 rebuild"
    echo "  - Clean up and retry: $0 clean"
    echo ""
    echo "Aborting script execution."
    exit $exit_code
}

# Function to tag image with GHCR registry
tag_image() {
    echo "Tagging image for GHCR registry..."
    verbose_echo "Executing: docker tag magentic-desktop-magentic-desktop ghcr.io/laquereric/magentic-desktop:latest"
    if ! docker tag magentic-desktop-magentic-desktop ghcr.io/laquereric/magentic-desktop:latest; then
        echo "Warning: Failed to tag image with GHCR registry tag"
        verbose_echo "This is not critical - the image will still work locally"
    else
        echo "✓ Image successfully tagged as ghcr.io/laquereric/magentic-desktop:latest"
    fi
}

# Function to cleanup existing containers and images
cleanup_and_rebuild() {
    echo "Cleaning up existing containers and images..."
    verbose_echo "Using compose command: $COMPOSE_CMD"
    
    # Stop and remove container if running
    if $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
        echo "Stopping running container..."
        verbose_echo "Executing: $COMPOSE_CMD down"
        if ! $COMPOSE_CMD down; then
            abort_with_reason "Failed to stop running container" "The 'docker compose down' command returned an error during cleanup"
        fi
        
        # Wait a moment for container to fully stop
        echo "Waiting for container to stop..."
        sleep 2
        
        # Verify container is actually stopped
        verbose_echo "Checking container status..."
        if $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            abort_with_reason "Container failed to stop properly" "Container is still running after 'docker compose down' command during cleanup"
        fi
        
        echo "Container stopped successfully."
    else
        verbose_echo "No running magentic-desktop container found"
    fi
    
    # Remove container if it exists (even if stopped)
    if docker ps -a --format "table {{.Names}}" | grep -q "magentic-desktop"; then
        echo "Removing existing container..."
        verbose_echo "Executing: docker rm -f magentic-desktop"
        if ! docker rm -f magentic-desktop; then
            abort_with_reason "Failed to remove existing container" "The 'docker rm -f magentic-desktop' command returned an error"
        fi
        echo "Container removed successfully."
    else
        verbose_echo "No existing magentic-desktop container found"
    fi
    
    # Remove the image to force rebuild
    if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "magentic-desktop"; then
        echo "Removing existing image..."
        verbose_echo "Executing: docker rmi -f magentic-desktop"
        docker rmi -f magentic-desktop 2>/dev/null || true
    else
        verbose_echo "No existing magentic-desktop image found"
    fi
    
    echo "Cleanup completed!"
}

# Parse command
case "$COMMAND" in
    "up")
        # Only stop existing container, don't rebuild image
        if $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "Stopping existing container..."
            verbose_echo "Executing: $COMPOSE_CMD down"
            if ! $COMPOSE_CMD down; then
                abort_with_reason "Failed to stop existing container" "The 'docker compose down' command returned an error during 'up' operation"
            fi
            echo "Container stopped successfully."
        else
            verbose_echo "No running magentic-desktop container found"
        fi
        
        echo ""
        echo "Starting magentic-desktop with Docker Compose..."
        
        # Set up environment for shell override if specified
        if [ -n "$SHELL_OVERRIDE" ]; then
            echo "Using shell override: $SHELL_OVERRIDE"
            export OVERRIDE_COMMAND="$SHELL_OVERRIDE"
            verbose_echo "Setting OVERRIDE_COMMAND=$SHELL_OVERRIDE"
        fi
        
        verbose_echo "Executing: $COMPOSE_CMD up -d"
        
        # Start the container and capture exit code
        if ! $COMPOSE_CMD up -d; then
            abort_with_reason "Failed to start container" "The 'docker compose up -d' command returned an error"
        fi
        
        # Wait a moment for container to fully start
        echo "Waiting for container to start..."
        sleep 3
        
        # Verify container is actually running
        verbose_echo "Checking container status..."
        if ! $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "ERROR: Container failed to start or is not running!"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        # Check if container is healthy (running state)
        CONTAINER_STATUS=$(docker ps --filter "name=magentic-desktop" --format "{{.Status}}" | head -1)
        if [[ ! "$CONTAINER_STATUS" =~ "Up" ]]; then
            echo "ERROR: Container is not in running state! Status: $CONTAINER_STATUS"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        echo ""
        echo "✓ Container successfully started and is running!"
        echo "Press Ctrl+C to stop following logs (container will continue running)"
        echo "To connect via RDP, use localhost:3389"
        verbose_echo "Container ports: 3389 (RDP), 8080 (VS Code)"
        verbose_echo "Container status: $CONTAINER_STATUS"
        echo ""
        verbose_echo "Executing: $COMPOSE_CMD logs -f"
        $COMPOSE_CMD logs -f
        ;;
    "rebuild")
        cleanup_and_rebuild
        echo ""
        echo "Building and starting magentic-desktop with Docker Compose..."
        
        # Set up environment for shell override if specified
        if [ -n "$SHELL_OVERRIDE" ]; then
            echo "Using shell override: $SHELL_OVERRIDE"
            export OVERRIDE_COMMAND="$SHELL_OVERRIDE"
            verbose_echo "Setting OVERRIDE_COMMAND=$SHELL_OVERRIDE"
        fi
        
        verbose_echo "Executing: $COMPOSE_CMD up --build -d"
        
        # Start the container and capture exit code
        if ! $COMPOSE_CMD up --build -d; then
            echo "ERROR: Failed to start container!"
            echo "Aborting script execution."
            exit 1
        fi
        
        # Tag the image after successful build
        tag_image
        
        # Wait a moment for container to fully start
        echo "Waiting for container to start..."
        sleep 3
        
        # Verify container is actually running
        verbose_echo "Checking container status..."
        if ! $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "ERROR: Container failed to start or is not running!"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        # Check if container is healthy (running state)
        CONTAINER_STATUS=$(docker ps --filter "name=magentic-desktop" --format "{{.Status}}" | head -1)
        if [[ ! "$CONTAINER_STATUS" =~ "Up" ]]; then
            echo "ERROR: Container is not in running state! Status: $CONTAINER_STATUS"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        echo ""
        echo "✓ Container successfully rebuilt and is running!"
        echo "Press Ctrl+C to stop following logs (container will continue running)"
        echo "To connect via RDP, use localhost:3389"
        verbose_echo "Container ports: 3389 (RDP), 8080 (VS Code)"
        verbose_echo "Container status: $CONTAINER_STATUS"
        echo ""
        verbose_echo "Executing: $COMPOSE_CMD logs -f"
        $COMPOSE_CMD logs -f
        ;;
    "down")
        echo "Stopping magentic-desktop container..."
        verbose_echo "Executing: $COMPOSE_CMD down"
        
        # Check if container is running first
        if ! $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "No running magentic-desktop container found."
            exit 0
        fi
        
        # Stop the container
        if ! $COMPOSE_CMD down; then
            abort_with_reason "Failed to stop container" "The 'docker compose down' command returned an error during 'down' operation"
        fi
        
        # Wait a moment for container to fully stop
        echo "Waiting for container to stop..."
        sleep 2
        
        # Verify container is actually stopped
        verbose_echo "Checking container status..."
        if $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "ERROR: Container failed to stop!"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        echo "Container stopped and removed successfully."
        ;;
    "logs")
        echo "Showing magentic-desktop logs..."
        verbose_echo "Executing: $COMPOSE_CMD logs -f"
        $COMPOSE_CMD logs -f
        ;;
    "restart")
        echo "Restarting magentic-desktop container..."
        verbose_echo "Executing: $COMPOSE_CMD restart"
        
        # Restart the container and capture exit code
        if ! $COMPOSE_CMD restart; then
            abort_with_reason "Failed to restart container" "The 'docker compose restart' command returned an error"
        fi
        
        # Wait a moment for container to fully start
        echo "Waiting for container to restart..."
        sleep 3
        
        # Verify container is actually running
        verbose_echo "Checking container status..."
        if ! $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "ERROR: Container failed to restart or is not running!"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        # Check if container is healthy (running state)
        CONTAINER_STATUS=$(docker ps --filter "name=magentic-desktop" --format "{{.Status}}" | head -1)
        if [[ ! "$CONTAINER_STATUS" =~ "Up" ]]; then
            echo "ERROR: Container is not in running state! Status: $CONTAINER_STATUS"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        echo "✓ Container successfully restarted and is running!"
        echo "Following logs..."
        verbose_echo "Container status: $CONTAINER_STATUS"
        verbose_echo "Executing: $COMPOSE_CMD logs -f"
        $COMPOSE_CMD logs -f
        ;;
    "build")
        cleanup_and_rebuild
        echo ""
        echo "Building magentic-desktop image..."
        verbose_echo "Executing: $COMPOSE_CMD build --no-cache"
        if ! $COMPOSE_CMD build --no-cache; then
            echo "ERROR: Failed to build image!"
            echo "Aborting script execution."
            exit 1
        fi
        
        # Tag the image after successful build
        tag_image
        
        echo "Build completed!"
        ;;
    "build_multi")
        cleanup_and_rebuild
        echo ""
        echo "Building multi-architecture magentic-desktop image..."
        echo "This will build for both ARM64 and AMD64 architectures"
        
        # Check if buildx is available
        if ! docker buildx version &> /dev/null; then
            echo "ERROR: Docker buildx is not available!"
            echo "Please install Docker buildx or update Docker to a newer version"
            exit 1
        fi
        
        # Create and use a new builder instance for multi-platform builds
        echo "Setting up multi-platform builder..."
        verbose_echo "Executing: docker buildx create --name multiarch --use"
        if ! docker buildx create --name multiarch --use 2>/dev/null; then
            echo "Builder 'multiarch' already exists, using existing builder"
            docker buildx use multiarch
        fi
        
        # Build for multiple platforms
        echo "Building for multiple architectures..."
        verbose_echo "Executing: docker buildx build --platform linux/amd64,linux/arm64 --tag ghcr.io/laquereric/magentic-desktop:latest --push ."
        
        if ! docker buildx build --platform linux/amd64,linux/arm64 --tag ghcr.io/laquereric/magentic-desktop:latest --push .; then
            echo "ERROR: Failed to build multi-architecture image!"
            echo "Make sure you're authenticated with GHCR: docker login ghcr.io"
            exit 1
        fi
        
        echo "✓ Multi-architecture image successfully built and pushed to GHCR!"
        echo "Image is now available for both ARM64 and AMD64 architectures"
        ;;
    "tag")
        echo "Tagging existing local image for GHCR registry..."
        
        # Check if magentic-desktop-magentic-desktop image exists locally
        if ! docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "^magentic-desktop-magentic-desktop "; then
            echo "ERROR: Local image 'magentic-desktop-magentic-desktop' not found!"
            echo "Available images:"
            docker images --format "table {{.Repository}}:{{.Tag}}" | head -10
            echo ""
            echo "Please build the image first using: $0 build"
            echo "Or rebuild with: $0 rebuild"
            exit 1
        fi
        
        verbose_echo "Executing: docker tag magentic-desktop-magentic-desktop ghcr.io/laquereric/magentic-desktop:latest"
        
        # Tag the image for GHCR registry
        if ! docker tag magentic-desktop-magentic-desktop ghcr.io/laquereric/magentic-desktop:latest; then
            abort_with_reason "Failed to tag image" "The 'docker tag' command returned an error"
        fi
        
        echo "✓ Image successfully tagged as ghcr.io/laquereric/magentic-desktop:latest"
        echo "You can now push this image using: $0 push_ghcr"
        ;;
    "push_ghcr")
        echo "Pushing image to GHCR registry..."
        
        # Set CP environment for GHCR authentication
        echo "Setting up CP environment..."
        verbose_echo "Executing: source .secrets/eric.laquer/set_env.sh"
        if ! source .secrets/eric.laquer/set_env.sh; then
            abort_with_reason "Failed to set CP environment" "The '.secrets/eric.laquer/set_env.sh' script returned an error"
        fi
        echo "✓ CP environment configured"
        
        # Authenticate with GHCR using credentials from secrets
        echo "Authenticating with GHCR registry..."
        verbose_echo "Executing: echo \$CP | docker login ghcr.io --username \$GITHUB_USERNAME --password-stdin"
        if ! echo "$CP" | docker login ghcr.io --username "$GITHUB_USERNAME" --password-stdin; then
            abort_with_reason "Failed to authenticate with GHCR" "The 'docker login' command returned an error. Check your CP token and GITHUB_USERNAME in .secrets/eric.laquer/set_env.sh"
        fi
        echo "✓ Successfully authenticated with GHCR"
        
        # Check if the image exists locally
        if ! docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "ghcr.io/laquereric/magentic-desktop:latest"; then
            echo "ERROR: Image ghcr.io/laquereric/magentic-desktop:latest not found locally!"
            echo "Please build the image first using: $0 build"
            echo "Or rebuild with: $0 rebuild"
            exit 1
        fi
        
        verbose_echo "Executing: docker push ghcr.io/laquereric/magentic-desktop:latest"
        
        # Push the image to GHCR registry
        if ! docker push ghcr.io/laquereric/magentic-desktop:latest; then
            abort_with_reason "Failed to push image to GHCR registry" "The 'docker push' command returned an error. Make sure you're authenticated with GHCR."
        fi
        
        echo "✓ Image successfully pushed to ghcr.io/laquereric/magentic-desktop:latest"
        echo "You can now pull this image from: ghcr.io/laquereric/magentic-desktop:latest"
        ;;
    "local_image_repo")
        echo "Local image repository details:"
        echo "================================"
        
        # Show all magentic-desktop related images
        echo ""
        echo "📦 Available magentic-desktop images:"
        if docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}" | grep -q "magentic-desktop"; then
            docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}" | grep "magentic-desktop"
        else
            echo "No magentic-desktop images found locally"
        fi
        
        # Show GHCR tagged images
        echo ""
        echo "🏷️  GHCR tagged images:"
        if docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}" | grep -q "ghcr.io/laquereric/magentic-desktop"; then
            docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}" | grep "ghcr.io/laquereric/magentic-desktop"
        else
            echo "No GHCR tagged images found locally"
        fi
        
        # Show detailed image information if available
        if docker images --format "{{.Repository}}" | grep -q "^magentic-desktop-magentic-desktop$"; then
            echo ""
            echo "🔍 Detailed image information:"
            verbose_echo "Executing: docker inspect magentic-desktop-magentic-desktop"
            docker inspect magentic-desktop-magentic-desktop 2>/dev/null | jq -r '.[] | {
                "Id": .Id,
                "Created": .Created,
                "Size": .Size,
                "Architecture": .Architecture,
                "Os": .Os,
                "Author": .Author,
                "Comment": .Comment,
                "Config": {
                    "Cmd": .Config.Cmd,
                    "Entrypoint": .Config.Entrypoint,
                    "WorkingDir": .Config.WorkingDir,
                    "User": .Config.User,
                    "ExposedPorts": .Config.ExposedPorts,
                    "Env": .Config.Env
                }
            }' 2>/dev/null || docker inspect magentic-desktop-magentic-desktop
        fi
        
        # Show image layers if available
        if docker images --format "{{.Repository}}" | grep -q "^magentic-desktop-magentic-desktop$"; then
            echo ""
            echo "📋 Image layers:"
            verbose_echo "Executing: docker history magentic-desktop-magentic-desktop"
            docker history magentic-desktop-magentic-desktop --format "table {{.CreatedBy}}\t{{.Size}}\t{{.CreatedAt}}" 2>/dev/null || docker history magentic-desktop-magentic-desktop
        fi
        
        echo ""
        echo "💡 Tips:"
        echo "  - Use 'docker images' to see all images"
        echo "  - Use 'docker inspect <image>' for detailed information"
        echo "  - Use 'docker history <image>' to see image layers"
        ;;
    "clean")
        cleanup_and_rebuild
        ;;
    "status")
        echo "Container status:"
        verbose_echo "Executing: $COMPOSE_CMD ps"
        $COMPOSE_CMD ps
        verbose_echo "Executing: docker ps -a (all containers)"
        docker ps -a
        ;;
    "shell")
        echo "Starting container and dropping into interactive bash session..."
        
        # Stop existing container if running
        if $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "Stopping existing container..."
            verbose_echo "Executing: $COMPOSE_CMD down"
            if ! $COMPOSE_CMD down; then
                abort_with_reason "Failed to stop existing container" "The 'docker compose down' command returned an error during 'shell' operation"
            fi
            echo "Container stopped successfully."
        else
            verbose_echo "No running magentic-desktop container found"
        fi
        
        echo ""
        echo "Starting magentic-desktop with interactive bash session..."
        
        # Set up environment for shell override
        export OVERRIDE_COMMAND="bash"
        verbose_echo "Setting OVERRIDE_COMMAND=bash"
        
        verbose_echo "Executing: $COMPOSE_CMD up -d"
        
        # Start the container and capture exit code
        if ! $COMPOSE_CMD up -d; then
            abort_with_reason "Failed to start container" "The 'docker compose up -d' command returned an error"
        fi
        
        # Wait a moment for container to fully start
        echo "Waiting for container to start..."
        sleep 3
        
        # Verify container is actually running
        verbose_echo "Checking container status..."
        if ! $COMPOSE_CMD ps -q magentic-desktop | grep -q .; then
            echo "ERROR: Container failed to start or is not running!"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        # Check if container is healthy (running state)
        CONTAINER_STATUS=$(docker ps --filter "name=magentic-desktop" --format "{{.Status}}" | head -1)
        if [[ ! "$CONTAINER_STATUS" =~ "Up" ]]; then
            echo "ERROR: Container is not in running state! Status: $CONTAINER_STATUS"
            echo "Container status:"
            $COMPOSE_CMD ps
            echo ""
            echo "Container logs:"
            $COMPOSE_CMD logs
            echo ""
            echo "Aborting script execution."
            exit 1
        fi
        
        echo "✓ Container successfully started and is running!"
        echo "Dropping into interactive bash session..."
        echo "Type 'exit' to leave the container (container will continue running)"
        echo ""
        
        # Execute interactive bash session
        verbose_echo "Executing: docker exec -it magentic-desktop bash"
        docker exec -it magentic-desktop bash
        ;;
    "help"|"-h"|"--help")
        show_usage
        ;;
    *)
        echo "Unknown command: $COMMAND"
        echo ""
        show_usage
        exit 1
        ;;
esac
